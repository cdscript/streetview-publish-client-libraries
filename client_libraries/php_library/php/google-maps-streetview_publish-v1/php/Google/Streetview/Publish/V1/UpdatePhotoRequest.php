<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/streetview/publish/v1/rpcmessages.proto

namespace Google\Streetview\Publish\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request to update the metadata of a photo.
 * Updating the pixels of a photo is not supported.
 * </pre>
 *
 * Protobuf type <code>google.streetview.publish.v1.UpdatePhotoRequest</code>
 */
class UpdatePhotoRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Required. Photo object containing the new metadata. Only the fields
     * specified in `update_mask` are used. If `update_mask` is not present, the
     * update applies to all fields.
     * **Note:** To update `pose.altitude`, `pose.latlngpair` has to be filled as
     * well. Otherwise, the request will fail.
     * </pre>
     *
     * <code>.google.streetview.publish.v1.Photo photo = 1;</code>
     */
    private $photo = null;
    /**
     * <pre>
     * Mask that identifies fields on the photo metadata to update.
     * If not present, the old Photo metadata will be entirely replaced with the
     * new Photo metadata in this request. The update fails if invalid fields are
     * specified. Multiple fields can be specified in a comma-delimited list.
     * The following fields are valid:
     * * `pose.heading`
     * * `pose.latlngpair`
     * * `pose.level`
     * * `pose.altitude`
     * * `connections`
     * * `places`
     * **Note:** Repeated fields in `update_mask` mean the entire set of repeated
     * values will be replaced with the new contents. For example, if
     * `UpdatePhotoRequest.photo.update_mask` contains `connections` and
     * `UpdatePhotoRequest.photo.connections` is empty, all connections will be
     * removed.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    private $update_mask = null;

    public function __construct() {
        \GPBMetadata\Google\Streetview\Publish\V1\Rpcmessages::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Required. Photo object containing the new metadata. Only the fields
     * specified in `update_mask` are used. If `update_mask` is not present, the
     * update applies to all fields.
     * **Note:** To update `pose.altitude`, `pose.latlngpair` has to be filled as
     * well. Otherwise, the request will fail.
     * </pre>
     *
     * <code>.google.streetview.publish.v1.Photo photo = 1;</code>
     */
    public function getPhoto()
    {
        return $this->photo;
    }

    /**
     * <pre>
     * Required. Photo object containing the new metadata. Only the fields
     * specified in `update_mask` are used. If `update_mask` is not present, the
     * update applies to all fields.
     * **Note:** To update `pose.altitude`, `pose.latlngpair` has to be filled as
     * well. Otherwise, the request will fail.
     * </pre>
     *
     * <code>.google.streetview.publish.v1.Photo photo = 1;</code>
     */
    public function setPhoto(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Streetview\Publish\V1\Photo::class);
        $this->photo = $var;
    }

    /**
     * <pre>
     * Mask that identifies fields on the photo metadata to update.
     * If not present, the old Photo metadata will be entirely replaced with the
     * new Photo metadata in this request. The update fails if invalid fields are
     * specified. Multiple fields can be specified in a comma-delimited list.
     * The following fields are valid:
     * * `pose.heading`
     * * `pose.latlngpair`
     * * `pose.level`
     * * `pose.altitude`
     * * `connections`
     * * `places`
     * **Note:** Repeated fields in `update_mask` mean the entire set of repeated
     * values will be replaced with the new contents. For example, if
     * `UpdatePhotoRequest.photo.update_mask` contains `connections` and
     * `UpdatePhotoRequest.photo.connections` is empty, all connections will be
     * removed.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public function getUpdateMask()
    {
        return $this->update_mask;
    }

    /**
     * <pre>
     * Mask that identifies fields on the photo metadata to update.
     * If not present, the old Photo metadata will be entirely replaced with the
     * new Photo metadata in this request. The update fails if invalid fields are
     * specified. Multiple fields can be specified in a comma-delimited list.
     * The following fields are valid:
     * * `pose.heading`
     * * `pose.latlngpair`
     * * `pose.level`
     * * `pose.altitude`
     * * `connections`
     * * `places`
     * **Note:** Repeated fields in `update_mask` mean the entire set of repeated
     * values will be replaced with the new contents. For example, if
     * `UpdatePhotoRequest.photo.update_mask` contains `connections` and
     * `UpdatePhotoRequest.photo.connections` is empty, all connections will be
     * removed.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask update_mask = 2;</code>
     */
    public function setUpdateMask(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\FieldMask::class);
        $this->update_mask = $var;
    }

}

