<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/streetview/publish/v1/resources.proto

namespace Google\Streetview\Publish\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Raw pose measurement for an entity.
 * </pre>
 *
 * Protobuf type <code>google.streetview.publish.v1.Pose</code>
 */
class Pose extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Latitude and longitude pair of the pose, as explained here:
     * https://developers.google.com/my-business/reference/rest/Shared.Types/LatLng
     * When creating a photo, if the latitude and longitude pair are not provided
     * here, the geolocation from the exif header will be used.
     * If the latitude and longitude pair is not provided and cannot be found in
     * the exif header, the create photo process will fail.
     * </pre>
     *
     * <code>.google.type.LatLng lat_lng_pair = 1;</code>
     */
    private $lat_lng_pair = null;
    /**
     * <pre>
     * Altitude of the pose in meters above ground level (as defined by WGS84).
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double altitude = 2;</code>
     */
    private $altitude = 0.0;
    /**
     * <pre>
     * Compass heading, measured at the center of the photo in degrees clockwise
     * from North. Value must be &gt;=0 and &lt;360.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double heading = 3;</code>
     */
    private $heading = 0.0;
    /**
     * <pre>
     * Pitch, measured at the center of the photo in degrees. Value must be &gt;=-90
     * and &lt;= 90. A value of -90 means looking directly down, and a value of 90
     * means looking directly up.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double pitch = 4;</code>
     */
    private $pitch = 0.0;
    /**
     * <pre>
     * Roll, measured in degrees. Value must be &gt;-180 and &lt;=180. A value of 0
     * means level with the horizon.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double roll = 5;</code>
     */
    private $roll = 0.0;

    public function __construct() {
        \GPBMetadata\Google\Streetview\Publish\V1\Resources::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Latitude and longitude pair of the pose, as explained here:
     * https://developers.google.com/my-business/reference/rest/Shared.Types/LatLng
     * When creating a photo, if the latitude and longitude pair are not provided
     * here, the geolocation from the exif header will be used.
     * If the latitude and longitude pair is not provided and cannot be found in
     * the exif header, the create photo process will fail.
     * </pre>
     *
     * <code>.google.type.LatLng lat_lng_pair = 1;</code>
     */
    public function getLatLngPair()
    {
        return $this->lat_lng_pair;
    }

    /**
     * <pre>
     * Latitude and longitude pair of the pose, as explained here:
     * https://developers.google.com/my-business/reference/rest/Shared.Types/LatLng
     * When creating a photo, if the latitude and longitude pair are not provided
     * here, the geolocation from the exif header will be used.
     * If the latitude and longitude pair is not provided and cannot be found in
     * the exif header, the create photo process will fail.
     * </pre>
     *
     * <code>.google.type.LatLng lat_lng_pair = 1;</code>
     */
    public function setLatLngPair(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Type\LatLng::class);
        $this->lat_lng_pair = $var;
    }

    /**
     * <pre>
     * Altitude of the pose in meters above ground level (as defined by WGS84).
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double altitude = 2;</code>
     */
    public function getAltitude()
    {
        return $this->altitude;
    }

    /**
     * <pre>
     * Altitude of the pose in meters above ground level (as defined by WGS84).
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double altitude = 2;</code>
     */
    public function setAltitude($var)
    {
        GPBUtil::checkDouble($var);
        $this->altitude = $var;
    }

    /**
     * <pre>
     * Compass heading, measured at the center of the photo in degrees clockwise
     * from North. Value must be &gt;=0 and &lt;360.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double heading = 3;</code>
     */
    public function getHeading()
    {
        return $this->heading;
    }

    /**
     * <pre>
     * Compass heading, measured at the center of the photo in degrees clockwise
     * from North. Value must be &gt;=0 and &lt;360.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double heading = 3;</code>
     */
    public function setHeading($var)
    {
        GPBUtil::checkDouble($var);
        $this->heading = $var;
    }

    /**
     * <pre>
     * Pitch, measured at the center of the photo in degrees. Value must be &gt;=-90
     * and &lt;= 90. A value of -90 means looking directly down, and a value of 90
     * means looking directly up.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double pitch = 4;</code>
     */
    public function getPitch()
    {
        return $this->pitch;
    }

    /**
     * <pre>
     * Pitch, measured at the center of the photo in degrees. Value must be &gt;=-90
     * and &lt;= 90. A value of -90 means looking directly down, and a value of 90
     * means looking directly up.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double pitch = 4;</code>
     */
    public function setPitch($var)
    {
        GPBUtil::checkDouble($var);
        $this->pitch = $var;
    }

    /**
     * <pre>
     * Roll, measured in degrees. Value must be &gt;-180 and &lt;=180. A value of 0
     * means level with the horizon.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double roll = 5;</code>
     */
    public function getRoll()
    {
        return $this->roll;
    }

    /**
     * <pre>
     * Roll, measured in degrees. Value must be &gt;-180 and &lt;=180. A value of 0
     * means level with the horizon.
     * NaN indicates an unmeasured quantity.
     * </pre>
     *
     * <code>double roll = 5;</code>
     */
    public function setRoll($var)
    {
        GPBUtil::checkDouble($var);
        $this->roll = $var;
    }

}

